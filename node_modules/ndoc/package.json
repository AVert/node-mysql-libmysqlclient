{
  "name": "ndoc",
  "version": "3.1.0",
  "description": "JavaScript API documentor with simple syntax.",
  "keywords": [
    "api",
    "doc",
    "apidoc",
    "documentation",
    "pdoc"
  ],
  "homepage": "https://github.com/nodeca/ndoc",
  "contributors": [
    {
      "name": "Vitaly Puzrin",
      "email": "vitaly@rcdesign.ru",
      "url": "http://rcdesign.ru"
    },
    {
      "name": "Aleksey V Zapparov",
      "email": "ixti@member.fsf.org",
      "url": "http://www.ixti.net/"
    },
    {
      "name": "Vitaly Miniahmetov",
      "email": "kayo@illumium.org"
    },
    {
      "name": "Vladimir Dronnikov",
      "email": "dronnikov@gmail.com"
    }
  ],
  "bugs": {
    "url": "https://github.com/nodeca/ndoc/issues"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/nodeca/ndoc/blob/master/LICENSE"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/nodeca/ndoc.git"
  },
  "bin": {
    "ndoc": "bin/ndoc.js"
  },
  "main": "./index.js",
  "dependencies": {
    "lodash": "~1.3.1",
    "fs-tools": "~0.2.2",
    "argparse": "~0.1.12",
    "minimatch": "~0.2.5",
    "jade": "~0.31.2",
    "stylus": "~0.32.0",
    "nib": "~0.9.1",
    "marked": "~0.2.0",
    "highlight.js": "~7.3.0"
  },
  "devDependencies": {
    "pegjs": "~0.7.0"
  },
  "engines": {
    "node": ">= 0.6.0"
  },
  "preferGlobal": true,
  "readme": "# NDoc - JavaScript documentation generator\n\n[![Build Status](https://travis-ci.org/nodeca/ndoc.png?branch=master)](https://travis-ci.org/nodeca/ndoc)\n\nNDoc is an inline comment parser and JavaScript documentation generator written\nin Node.JS. This project was inspired by [PDoc](http://pdoc.org/syntax.html).\nIt tries to keep compatibility, but has some differences:\n\n- NDoc is primarily a CLI tool, so you don't need to code your documentor,\n  although it can be easily used as [library](#using-ndoc-as-module).\n- Clarified EBNF syntax. Definitions now **MUST** be separated with an empty\n  line from the following comments.\n- Added options for `deprecated` tag: you can set versions, when tag was\n  deprecated and when method/property will be removed.\n- Added new tags: `read-only`, `internal`, `chainable`\n- Events support.\n\n\n## How to Install\n\nWe suppose that you already have `Node` and `npm` installed.\nIf not - try [nvm](https://github.com/creationix/nvm).\n\n``` bash\nnpm install -g ndoc\n```\n\n\n## Usage\n\n``` dos\nusage: ndoc [-h] [-v] [--exclude PATTERN] [-o PATH] [--use PLUGIN]\n            [--alias MAPPING] [-r RENDERER] [--link-format FORMAT]\n            [-t TEMPLATE] [--show-all] [--package PACKAGE] [--index FILE]\n            [--gh-ribbon URL] [--broken-links ACTION] [--noenv]\n            PATH[PATH ...]\n\nPositional arguments:\n  PATH                            Source files location\n\nOptional arguments:\n  -h, --help                      Show this help message and exit.\n  -v, --version                   Show program's version number and exit.\n  --exclude PATTERN               Glob patterns of filenames to exclude (you \n                                  can use wildcards: ?, *, **).\n  -o PATH, --output PATH          Resulting file(s) location.\n  --use PLUGIN                    Load custom plugin.\n  --alias MAPPING                 Registers extensions alias. For example \n                                  `cc:js` will register `cc` extension as an \n                                  alias of `js`\n  -r RENDERER, --render RENDERER  Documentation renderer (html, json). More \n                                  can be added by custom plugins.\n  --link-format FORMAT            View sources link (no links by default) \n                                  format. You can use `{file}` and `{line}` \n                                  and any of `{package.*}` variables for \n                                  interpolation.\n  -t TEMPLATE, --title TEMPLATE   Documentation title template. You can use \n                                  any of `{package.*}` variables for \n                                  interpolation. DEFAULT: `{package.name} \n                                  {package.version} API documentation`\n  --show-all                      By default `internal` methods/properties \n                                  are not shown. This trigger makes ndoc show \n                                  all methods/properties\n  --package PACKAGE               Read specified package.json FILE. When not \n                                  specified, read ./package.json if such file \n                                  exists.\n  --index FILE                    Index file (with introduction text), e.g. \n                                  README.md file.\n  --gh-ribbon URL                 Add \"Fork me on GitHub\" ribbon with given \n                                  URL. You can use any of `{package.*}` \n                                  variables for interpolation.\n  --broken-links ACTION           What to do if broken link occurred (show, \n                                  hide, throw). DEFAULT: `show`.\n  --noenv                         Ignore .ndocrc\n```\n\n\n## Syntax\n\n[NDoc Syntax](https://github.com/nodeca/ndoc/blob/master/syntax.md).\nIt is similar to [PDoc](https://github.com/tobie/pdoc) one, with some\nextentions (see start of this doc for details).\n\n\n## For developers\n\nYou can generate prototype documentation for test:\n\n``` bash\nmake test\n```\n\nThen open `./tests/prototype-doc/index.html`.\nHere is [hosted example](http://nodeca.github.com/ndoc/tests/prototype/).\n\n\n#### Custom parsers and renderers\n\nYou can create and use your own parser/renderer via `--use` option. Get one of\nthe [parsers][parsers] or [renderers][renderers] as a base template, copy it\ninto separate folder. Create package.json and modify it to fit your needs. Then\nattach it with `--use my-module` argument.\n\n[parsers]: https://github.com/nodeca/ndoc/blob/master/lib/ndoc/plugins/parsers\n[renderers]: https://github.com/nodeca/ndoc/blob/master/lib/ndoc/plugins/renderers\n\n\n#### Using NDoc as module\n\nYou can use NDoc as module, for example, to override default options processing.\n\n``` javascript\nvar NDoc = require('ndoc');\n\n\nvar options = {\n  linkFormat  : 'http://example.com/{file}#{line}',\n  output:     : 'doc'\n};\n\nvar ast;\n\ntry {\n  ast = NDoc.parse(['lib/my-module.js'], options);\n} catch (err) {\n  console.error(err);\n  process.exit(1);\n}\n\ntry {\n  NDoc.render('html', ast, options);\n} catch (err) {\n  console.error(err);\n  process.exit(1);\n}\n```\n\n\n## License\n\nThis project is distributed under [MIT](https://github.com/nodeca/ndoc/blob/master/LICENSE) license.\n",
  "readmeFilename": "README.md",
  "_id": "ndoc@3.1.0",
  "_from": "ndoc@~3.1.0"
}
